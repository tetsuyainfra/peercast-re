name: CI-Build
on:
  # pushされたらbuild
  push:
  # Workflowを他のワークフローから呼べるように・・・
  workflow_call:
    outputs:
        git_hash:
          description: "git hash on build time"
          value: ${{ github.sha }}

env:
  # api-codegenで使うDockerのキャッシュ
  PATH_DOCKER_PULL_CACHE: /tmp/docker-img-arch

jobs:
  generate-matrix:
    name: Define matrix from json file
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v4

      - id: set-matrix
        run: echo "matrix=$(cat matrix.json | jq -c)" >> $GITHUB_OUTPUT
        working-directory: .github/workflows/

  build:
    name: Build binary
    needs: ["generate-matrix"]

    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}

    runs-on: ${{ matrix.runs_os }}

    outputs:
      artifact_name: ${{ steps.upload_artifact.outputs.artifact_name }}

    env:
      OUTPUT_FILENAME: "${{ matrix.os }}-${{ matrix.environment }}-${{ github.sha }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  #👈リポジトリのソースを持ってくる

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
          cache-dependency-path: "./peercast-re/client/package-lock.json"
      - name: Install dependencies
        run: npm ci
        working-directory: ./peercast-re/client

      - name: Run sccache-cache only on non-release runs
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        uses: mozilla-actions/sccache-action@v0.0.9
      - name: Set Rust caching env vars only on non-release runs
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
      - name: Run sccache stat for check
        shell: bash
        run: ${SCCACHE_PATH} --show-stats

      # Build Binary
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cache/sccache
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo

      # use mold (ld compatible linker)
      - uses: rui314/setup-mold@v1
        with:
          make-default: false

      - name: Run build script
        run: PROFILE=release TARGET=${{ matrix.target }} ./build.sh
        # run: cargo build ${{ matrix.environment.opt }} --target ${{ matrix.target }}

      - name: ls build dir
        run: ls target

      - name: ls build target dir
        run: ls target/${{ matrix.target }}/${{ matrix.environment.name }}

      # - name: Packaging binary
      #   env:
      #     ENVIRONMENT: ${{ matrix.environment.name }}
      #   run: |
      #     mkdir dist
      #     cp -a ${{ join(matrix.files, ' ') }} ./dist

      # artifacts
      - name: Upload artifact
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_FILENAME }}
          # path: ./dist
          path: "${{ join(matrix.files, '\n') }}"
          retention-days: 7
          compression-level: 1 # no compression = 0
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

  build-docker:
    name: Build docker image
    needs: ["generate-matrix", "build"]

    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}

    runs-on: ${{ matrix.runs_os }}

    env:
      OUTPUT_FILENAME: "${{ matrix.os }}-${{ matrix.environment }}-${{ github.sha }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.OUTPUT_FILENAME }}
          path: .

      - name: check files
        run: |
          pwd
          ls -lh ./
          ls -lh ./target

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            tetsuyainfra/peercast-root
          tags: |
            type=ref,event=branch
            type=sha
          # images: |
          #   my-docker-hub-namespace/my-docker-hub-repository
          #   ghcr.io/${{ github.repository }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Log in to the Container registry
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: "./docker/Dockerfile.peercast-root"
          build-args: |
            TARGET=${{ matrix.target }}
            PRIFILE=${{ matrix.environment.name }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # - name: Generate artifact attestation
      #   uses: actions/attest-build-provenance@v2
      #   with:
      #     subject-name: index.docker.io/my-docker-hub-namespace/my-docker-hub-repository
      #     subject-digest: ${{ steps.push.outputs.digest }}
      #     push-to-registry: true
